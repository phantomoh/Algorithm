# -*- coding: utf-8 -*-
"""
Created on Tue May  4 23:09:57 2021

@author: USER
"""

import pandas as pd

df = pd.read_csv("data/house.csv")
df.head(20) # 위에서 부터 20개 
df.info() # 데이터 int, float 등 정보 
<class 'pandas.core.frame.DataFrame'>
RangeIndex: 21613 entries, 0 to 21612
Data columns (total 21 columns):
 #   Column         Non-Null Count  Dtype  
---  ------         --------------  -----  
 0   id             21613 non-null  int64  
 1   date           21613 non-null  object 
 2   price          21613 non-null  float64
 3   bedrooms       21613 non-null  int64  
 4   bathrooms      21613 non-null  float64
 5   sqft_living    21613 non-null  int64  
 6   sqft_lot       21613 non-null  int64  
 7   floors         21613 non-null  float64
 8   waterfront     21613 non-null  int64  
 9   view           21613 non-null  int64  
 10  condition      21613 non-null  int64  
 11  grade          21613 non-null  int64  
 12  sqft_above     21613 non-null  int64  
 13  sqft_basement  21613 non-null  int64  
 14  yr_built       21613 non-null  int64  
 15  yr_renovated   21613 non-null  int64  
 16  zipcode        21613 non-null  int64  
 17  lat            21613 non-null  float64
 18  long           21613 non-null  float64
 19  sqft_living15  21613 non-null  int64  
 20  sqft_lot15     21613 non-null  int64  
dtypes: float64(5), int64(15), object(1)
memory usage: 3.5+ MB
df.describe() # R에서 summrary()와 유사, object != 숫자, describe 못함
id	price	bedrooms	bathrooms	sqft_living	sqft_lot	floors	waterfront	view	condition	grade	sqft_above	sqft_basement	yr_built	yr_renovated	zipcode	lat	long	sqft_living15	sqft_lot15
count	2.161300e+04	2.161300e+04	21613.000000	21613.000000	21613.000000	2.161300e+04	21613.000000	21613.000000	21613.000000	21613.000000	21613.000000	21613.000000	21613.000000	21613.000000	21613.000000	21613.000000	21613.000000	21613.000000	21613.000000	21613.000000
mean	4.580302e+09	5.400881e+05	3.370842	2.114757	2079.899736	1.510697e+04	1.494309	0.007542	0.234303	3.409430	7.656873	1788.390691	291.509045	1971.005136	84.402258	98077.939805	47.560053	-122.213896	1986.552492	12768.455652
std	2.876566e+09	3.671272e+05	0.930062	0.770163	918.440897	4.142051e+04	0.539989	0.086517	0.766318	0.650743	1.175459	828.090978	442.575043	29.373411	401.679240	53.505026	0.138564	0.140828	685.391304	27304.179631
min	1.000102e+06	7.500000e+04	0.000000	0.000000	290.000000	5.200000e+02	1.000000	0.000000	0.000000	1.000000	1.000000	290.000000	0.000000	1900.000000	0.000000	98001.000000	47.155900	-122.519000	399.000000	651.000000
25%	2.123049e+09	3.219500e+05	3.000000	1.750000	1427.000000	5.040000e+03	1.000000	0.000000	0.000000	3.000000	7.000000	1190.000000	0.000000	1951.000000	0.000000	98033.000000	47.471000	-122.328000	1490.000000	5100.000000
50%	3.904930e+09	4.500000e+05	3.000000	2.250000	1910.000000	7.618000e+03	1.500000	0.000000	0.000000	3.000000	7.000000	1560.000000	0.000000	1975.000000	0.000000	98065.000000	47.571800	-122.230000	1840.000000	7620.000000
75%	7.308900e+09	6.450000e+05	4.000000	2.500000	2550.000000	1.068800e+04	2.000000	0.000000	0.000000	4.000000	8.000000	2210.000000	560.000000	1997.000000	0.000000	98118.000000	47.678000	-122.125000	2360.000000	10083.000000
max	9.900000e+09	7.700000e+06	33.000000	8.000000	13540.000000	1.651359e+06	3.500000	1.000000	4.000000	5.000000	13.000000	9410.000000	4820.000000	2015.000000	2015.000000	98199.000000	47.777600	-121.315000	6210.000000	871200.000000
house_data=df.drop(['id','date'], axis=1) # axis = 1 : 열기준
house_data.head()
price	bedrooms	bathrooms	sqft_living	sqft_lot	floors	waterfront	view	condition	grade	sqft_above	sqft_basement	yr_built	yr_renovated	zipcode	lat	long	sqft_living15	sqft_lot15
0	221900.0	3	1.00	1180	5650	1.0	0	0	3	7	1180	0	1955	0	98178	47.5112	-122.257	1340	5650
1	538000.0	3	2.25	2570	7242	2.0	0	0	3	7	2170	400	1951	1991	98125	47.7210	-122.319	1690	7639
2	180000.0	2	1.00	770	10000	1.0	0	0	3	6	770	0	1933	0	98028	47.7379	-122.233	2720	8062
3	604000.0	4	3.00	1960	5000	1.0	0	0	5	7	1050	910	1965	0	98136	47.5208	-122.393	1360	5000
4	510000.0	3	2.00	1680	8080	1.0	0	0	3	8	1680	0	1987	0	98074	47.6168	-122.045	1800	7503
import matplotlib.pyplot as plt
import seaborn as sns
sns.set()
plt.figure(figsize=(20,15)) # 20,15 size data
sns.heatmap(house_data.corr(), annot=True, fmt='.2f', square=True) # annot=False -> 상관계수 사라짐, .2f : 소수점 2자리까지 
plt.show()

house_data.corr()
price	bedrooms	bathrooms	sqft_living	sqft_lot	floors	waterfront	view	condition	grade	sqft_above	sqft_basement	yr_built	yr_renovated	zipcode	lat	long	sqft_living15	sqft_lot15
price	1.000000	0.308350	0.525138	0.702035	0.089661	0.256794	0.266369	0.397293	0.036362	0.667434	0.605567	0.323816	0.054012	0.126434	-0.053203	0.307003	0.021626	0.585379	0.082447
bedrooms	0.308350	1.000000	0.515884	0.576671	0.031703	0.175429	-0.006582	0.079532	0.028472	0.356967	0.477600	0.303093	0.154178	0.018841	-0.152668	-0.008931	0.129473	0.391638	0.029244
bathrooms	0.525138	0.515884	1.000000	0.754665	0.087740	0.500653	0.063744	0.187737	-0.124982	0.664983	0.685342	0.283770	0.506019	0.050739	-0.203866	0.024573	0.223042	0.568634	0.087175
sqft_living	0.702035	0.576671	0.754665	1.000000	0.172826	0.353949	0.103818	0.284611	-0.058753	0.762704	0.876597	0.435043	0.318049	0.055363	-0.199430	0.052529	0.240223	0.756420	0.183286
sqft_lot	0.089661	0.031703	0.087740	0.172826	1.000000	-0.005201	0.021604	0.074710	-0.008958	0.113621	0.183512	0.015286	0.053080	0.007644	-0.129574	-0.085683	0.229521	0.144608	0.718557
floors	0.256794	0.175429	0.500653	0.353949	-0.005201	1.000000	0.023698	0.029444	-0.263768	0.458183	0.523885	-0.245705	0.489319	0.006338	-0.059121	0.049614	0.125419	0.279885	-0.011269
waterfront	0.266369	-0.006582	0.063744	0.103818	0.021604	0.023698	1.000000	0.401857	0.016653	0.082775	0.072075	0.080588	-0.026161	0.092885	0.030285	-0.014274	-0.041910	0.086463	0.030703
view	0.397293	0.079532	0.187737	0.284611	0.074710	0.029444	0.401857	1.000000	0.045990	0.251321	0.167649	0.276947	-0.053440	0.103917	0.084827	0.006157	-0.078400	0.280439	0.072575
condition	0.036362	0.028472	-0.124982	-0.058753	-0.008958	-0.263768	0.016653	0.045990	1.000000	-0.144674	-0.158214	0.174105	-0.361417	-0.060618	0.003026	-0.014941	-0.106500	-0.092824	-0.003406
grade	0.667434	0.356967	0.664983	0.762704	0.113621	0.458183	0.082775	0.251321	-0.144674	1.000000	0.755923	0.168392	0.446963	0.014414	-0.184862	0.114084	0.198372	0.713202	0.119248
sqft_above	0.605567	0.477600	0.685342	0.876597	0.183512	0.523885	0.072075	0.167649	-0.158214	0.755923	1.000000	-0.051943	0.423898	0.023285	-0.261190	-0.000816	0.343803	0.731870	0.194050
sqft_basement	0.323816	0.303093	0.283770	0.435043	0.015286	-0.245705	0.080588	0.276947	0.174105	0.168392	-0.051943	1.000000	-0.133124	0.071323	0.074845	0.110538	-0.144765	0.200355	0.017276
yr_built	0.054012	0.154178	0.506019	0.318049	0.053080	0.489319	-0.026161	-0.053440	-0.361417	0.446963	0.423898	-0.133124	1.000000	-0.224874	-0.346869	-0.148122	0.409356	0.326229	0.070958
yr_renovated	0.126434	0.018841	0.050739	0.055363	0.007644	0.006338	0.092885	0.103917	-0.060618	0.014414	0.023285	0.071323	-0.224874	1.000000	0.064357	0.029398	-0.068372	-0.002673	0.007854
zipcode	-0.053203	-0.152668	-0.203866	-0.199430	-0.129574	-0.059121	0.030285	0.084827	0.003026	-0.184862	-0.261190	0.074845	-0.346869	0.064357	1.000000	0.267048	-0.564072	-0.279033	-0.147221
lat	0.307003	-0.008931	0.024573	0.052529	-0.085683	0.049614	-0.014274	0.006157	-0.014941	0.114084	-0.000816	0.110538	-0.148122	0.029398	0.267048	1.000000	-0.135512	0.048858	-0.086419
long	0.021626	0.129473	0.223042	0.240223	0.229521	0.125419	-0.041910	-0.078400	-0.106500	0.198372	0.343803	-0.144765	0.409356	-0.068372	-0.564072	-0.135512	1.000000	0.334605	0.254451
sqft_living15	0.585379	0.391638	0.568634	0.756420	0.144608	0.279885	0.086463	0.280439	-0.092824	0.713202	0.731870	0.200355	0.326229	-0.002673	-0.279033	0.048858	0.334605	1.000000	0.183192
sqft_lot15	0.082447	0.029244	0.087175	0.183286	0.718557	-0.011269	0.030703	0.072575	-0.003406	0.119248	0.194050	0.017276	0.070958	0.007854	-0.147221	-0.086419	0.254451	0.183192	1.000000
sns.catplot(data=house_data, x='bathrooms', y='price', aspect=2)
<seaborn.axisgrid.FacetGrid at 0x1f68538ae80>

house_data['sqft_living'].max()
13540
from sklearn.model_selection import train_test_split
train_data=house_data.drop(['price'], axis=1) # input 
target_data = house_data['price'] # output 
x_train , x_test, y_train, y_test = train_test_split(train_data, target_data, test_size=0.2)
x_train , x_valid, y_train, y_valid = train_test_split(x_train, y_train, test_size=0.2)
print('모든 데이터 : ', train_data.shape)
print('train set : ', x_train.shape, y_train.shape)
print('vaild set : ', x_valid.shape, y_valid.shape)
print('test set : ', x_test.shape, y_test.shape)
모든 데이터 :  (21613, 18)
train set :  (13832, 18) (13832,)
vaild set :  (3458, 18) (3458,)
test set :  (4323, 18) (4323,)
from sklearn.linear_model import LinearRegression

lr = LinearRegression()
lr.fit(x_train, y_train) # 모델학습

print('train set score', lr.score(x_train, y_train))
print('train set score', lr.score(x_train, y_train))
train set score 0.7000853968303833
train set score 0.7000853968303833
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline

# 2차가 더 좋은 것을 볼 수 있다
model = make_pipeline(PolynomialFeatures(2), LinearRegression())
model.fit(x_train, y_train)

print('train set score', model.score(x_train, y_train))
print('valid set score', model.score(x_vaild, y_valid))
train set score 0.8239225435687662
valid set score -0.8973953118570146
my_data = pd.Series({
    "bedrooms": 2,
    "bathrooms": 3,
    "sqft_living": 3000,
    "sqft_lot": 5500,
    "floors": 4,
    "waterfront": 0,
    "view": 0,
    "condition": 3,
    "grade": 9,
    "sqft_above": 2350,
    "sqft_basement": 500,
    "yr_built": 2002,
    "yr_renovated": 0,
    "zipcode": 98000,
    "lat": 47.5317,
    "long": -122.391,
    "sqft_living15": 2900,
    "sqft_lot15": 3900
})

my_df = pd.DataFrame([my_data])

lr.predict(my_df)
array([908773.48627231])
의류사이즈
import pandas as pd
df = pd.read_csv("data/korean_players.csv")
print(df.head())
print(df.describe())
    이름  적합사이즈  나이  출장수    키  몸무게
0  조현우    275  27   12  189   75
1  김영권    285  29   69  186   81
2  김민재    290  22   19  190   88
3  이청용    265  30   89  180   70
4  손흥민    260  26   79  183   77
            적합사이즈         나이        출장수           키        몸무게
count   10.000000  10.000000  10.000000   10.000000  10.000000
mean   273.500000  24.700000  34.600000  181.500000  72.800000
std     10.013879   3.802046  33.383962    6.398785   7.828722
min    260.000000  18.000000   0.000000  170.000000  63.000000
25%    266.250000  22.000000  10.500000  180.000000  68.500000
50%    275.000000  26.000000  22.000000  181.500000  71.500000
75%    278.750000  26.750000  62.500000  185.500000  76.500000
max    290.000000  30.000000  89.000000  190.000000  88.000000
x_train = df[['나이', '출장수', '키', '몸무게']]
y_train = df['적합사이즈']
from sklearn.linear_model import LinearRegression
lr =  LinearRegression().fit(x_train, y_train) # 모델학습
print('train set accuracy', lr.score(x_train, y_train)) # 모델평가
train set accuracy 0.6550739388896691
df_test = pd.read_csv("data/test_players.csv")

x_test = df_test[['나이', '출장수', '키', '몸무게']]
prediction = lr.predict(x_test)
prediction
array([270.2212304 , 295.31336894])
lr.predict([[23,0,179,62]])
array([268.38043675])